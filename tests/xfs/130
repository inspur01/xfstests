#! /bin/bash
# FS QA Test No. 130
#
# Create and populate an XFS filesystem, corrupt the refcount btree,
# then see how the kernel and xfs_repair deal with it.
#
#-----------------------------------------------------------------------
# Copyright (c) 2015 Oracle, Inc.  All Rights Reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc.,  51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#-----------------------------------------------------------------------
#

seq=`basename "$0"`
seqres="$RESULT_DIR/$seq"
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=1	# failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
    cd /
    #rm -f $tmp.*
}

# get standard environment, filters and checks
. ./common/rc
. ./common/filter
. ./common/attr
. ./common/reflink

# real QA test starts here
_supported_os Linux
_supported_fs xfs
_require_scratch_reflink
_require_cp_reflink
test -n "${FORCE_FUZZ}" || _require_scratch_xfs_crc

rm -f "$seqres.full"

echo "+ create scratch fs"
_scratch_mkfs_xfs > /dev/null

echo "+ mount fs image"
_scratch_mount
blksz="$(stat -f -c '%s' "${SCRATCH_MNT}")"
agcount="$(xfs_info "${SCRATCH_MNT}" | grep agcount= | sed -e 's/^.*agcount=\([0-9]*\),.*$/\1/g')"

echo "+ make some files"
_pwrite_byte 0x62 0 $((blksz * 64)) "${SCRATCH_MNT}/file0" >> "$seqres.full"
_pwrite_byte 0x61 0 $((blksz * 64)) "${SCRATCH_MNT}/file1" >> "$seqres.full"
_cp_reflink "${SCRATCH_MNT}/file0" "${SCRATCH_MNT}/file2"
_cp_reflink "${SCRATCH_MNT}/file1" "${SCRATCH_MNT}/file3"
umount "${SCRATCH_MNT}"

echo "+ check fs"
_scratch_xfs_repair -n >> "$seqres.full" 2>&1 || \
	_fail "xfs_repair should not fail"

echo "+ corrupt image"
seq 0 $((agcount - 1)) | while read ag; do
	$XFS_DB_PROG -x -c "agf ${ag}" -c "agf ${ag}" -c "addr refcntroot" \
		-c "stack" -c "blocktrash -x 4096 -y 4096 -z -n 8 -3" \
		"${SCRATCH_DEV}" >> "$seqres.full" 2>&1
done

echo "+ mount image"
_scratch_mount

echo "+ reflink more"
_cp_reflink "${SCRATCH_MNT}/file1" "${SCRATCH_MNT}/file4" 2> /dev/null && \
	_fail "should not be able to reflink with busted refcount btree"
umount "${SCRATCH_MNT}"

echo "+ repair fs"
_scratch_xfs_repair >> "$seqres.full" 2>&1
_scratch_xfs_repair >> "$seqres.full" 2>&1

echo "+ mount image (2)"
_scratch_mount

echo "+ chattr -R -i"
$CHATTR_PROG -R -f -i "${SCRATCH_MNT}/"

echo "+ reflink more (2)"
_cp_reflink "${SCRATCH_MNT}/file1" "${SCRATCH_MNT}/file5" || \
	_fail "modified refcount tree"
umount "${SCRATCH_MNT}"

echo "+ check fs (2)"
_scratch_xfs_repair -n >> "$seqres.full" 2>&1 || \
	_fail "xfs_repair should not fail"

status=0
exit
