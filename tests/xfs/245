#! /bin/bash
# FS QA Test No. 245
#
# Make sure that reflink deals with extents going beyond EOF.
# - fallocate 256k in file1
# - pwrite 252-257k to cause it to speculatively prealloc file1
# - reflink file1 to file2
# - compare file[12]
#
#-----------------------------------------------------------------------
# Copyright (c) 2016, Oracle and/or its affiliates.  All Rights Reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc.,  51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#-----------------------------------------------------------------------

seq=`basename $0`
seqres=$RESULT_DIR/$seq
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=1    # failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
    cd /
    rm -rf $tmp.*
}

# get standard environment, filters and checks
. ./common/rc
. ./common/filter
. ./common/reflink

# real QA test starts here
_supported_os Linux
_supported_fs xfs
_require_scratch_reflink
_require_xfs_io_command "falloc"
_require_xfs_io_command "bmap" "-c"
_require_cp_reflink

rm -f $seqres.full

echo "Format and mount"
_scratch_mkfs > $seqres.full 2>&1
_scratch_mount >> $seqres.full 2>&1

testdir=$SCRATCH_MNT/test-$seq
mkdir $testdir

echo "Create the original files"
$XFS_IO_PROG -f -c "falloc 0 256k" -c "pwrite 252k 6k" $testdir/file1 >> $seqres.full
_scratch_cycle_mount
_cp_reflink $testdir/file1 $testdir/file2 >> $seqres.full

echo "Compare files"
md5sum $testdir/file1 | _filter_scratch
md5sum $testdir/file2 | _filter_scratch

echo "Unwritten data extents"
test $(_xfs_bmapx_find data $testdir/file1 '10000$') -gt 0 || \
	echo "Expected to find an unwritten file1 extent"
echo "Shared data extents"
test $(_xfs_bmapx_find data $testdir/file1 '100000$') -gt 0 || \
	echo "Expected to find a shared data extent"

echo "Hole data extents"
test $(_xfs_bmapx_find data $testdir/file2 'hole') -gt 0 || \
	echo "Expected to find a hole data extent"
echo "Shared data extents"
test $(_xfs_bmapx_find data $testdir/file2 '100000$') -gt 0 || \
	echo "Expected to find a shared data extent"

echo "Hole cow extents"
test $(_xfs_bmapx_find cow $testdir/file1 'hole') -gt 0 || \
	echo "Expected to find a hole cow extent"
echo "Hole cow extents"
test $(_xfs_bmapx_find cow $testdir/file2 'hole') -gt 0 || \
	echo "Expected to find a hole cow extent"

# success, all done
status=0
exit
