#! /bin/bash
# FS QA Test No. 005
#
# Test that a bad crc on a primary V5 superblock will fail the mount
#
# 10e6e65 xfs: be more forgiving of a v4 secondary sb w/ junk in v5 fields
# inadvertently caused primary SB CRC failures to not error out, this
# is a regression test for that fix.
#
#-----------------------------------------------------------------------
# Copyright (c) 2014 Red Hat, Inc.  All Rights Reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc.,  51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#-----------------------------------------------------------------------
#

seq=`basename $0`
seqres=$RESULT_DIR/$seq
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=1	# failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
    cd /
    rm -f $tmp.*
}

filter_mount()
{
	sed -e "s/mount .* failed: //"
}

# get standard environment, filters and checks
. ./common/rc
. ./common/filter

# Modify as appropriate.
_supported_fs xfs
_supported_os Linux

_require_scratch_nocheck
_require_xfs_mkfs_crc

rm -f $seqres.full

_scratch_mkfs_xfs -m crc=1 >> $seqres.full 2>&1 || _fail "mkfs failed"

# Zap the crc.  xfs_db updates the CRC post-write, so poke it directly
$XFS_IO_PROG -c "pwrite 224 4" -c fsync $SCRATCH_DEV | _filter_xfs_io

# should FAIL, the crc is bad; golden output contains mount failure
_scratch_mount 2>&1 | filter_mount

# success, all done
status=0
exit
