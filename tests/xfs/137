#! /bin/bash
# FS QA Test No. 137
#
# XFS v5 supers carry an LSN in various on-disk structures to track when
# associated metadata was last written to disk. These metadata LSNs must always
# be behind the current LSN as dictated by the log to ensure log recovery
# correctness after a potential crash. This test uses xfs_db to intentionally
# put the current LSN behind metadata LSNs and verifies that the kernel and
# xfs_repair detect the problem.
#
#-----------------------------------------------------------------------
# Copyright (c) 2015 Red Hat, Inc. All Rights Reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc.,  51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#-----------------------------------------------------------------------
#

seq=`basename $0`
seqres=$RESULT_DIR/$seq
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=1	# failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
	cd /
	rm -f $tmp.*
}

rm -f $seqres.full

# get standard environment, filters and checks
. ./common/rc

# real QA test starts here

# Modify as appropriate.
_supported_fs xfs
_supported_os Linux
_require_scratch
_require_scratch_xfs_crc
_require_xfs_db_command "logformat"

_scratch_mkfs >> $seqres.full 2>&1 || _fail "mkfs failed"

# push the log cycle ahead so we have room to move it backwards later
$XFS_DB_PROG -x -c "logformat -c 3" $SCRATCH_DEV >> $seqres.full 2>&1

# do some work on the fs to update metadata LSNs
_scratch_mount
$FSSTRESS_PROG -d $SCRATCH_MNT -n 999 -p 4 -w >> $seqres.full 2>&1
_scratch_unmount

# Reformat to the current cycle and try to mount. This fails in most cases
# because the sb LSN is ahead of the current LSN. If it doesn't fail, push the
# cycle back further and try again.
$XFS_DB_PROG -x -c "logformat" $SCRATCH_DEV >> $seqres.full 2>&1
_scratch_mount >> $seqres.full 2>&1
if [ $? != 0 ]; then
	echo mount failure detected
else
	_scratch_unmount
	$XFS_DB_PROG -x -c "logformat -c 2" $SCRATCH_DEV >> $seqres.full 2>&1
	_scratch_mount >> $seqres.full 2>&1 || echo mount failure detected
fi

# verify that repair detects invalid LSNs as well
$XFS_REPAIR_PROG -n $SCRATCH_DEV >> $seqres.full 2>&1 || \
	echo repair failure detected

# repair for real so the post-test check can verify repair fixed things up
$XFS_REPAIR_PROG $SCRATCH_DEV >> $seqres.full 2>&1

# success, all done
status=0
exit
