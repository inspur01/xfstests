#! /bin/bash
# FS QA Test No. 236
#
# Ensure that we can create enough distinct rmapbt entries to force creation
# of a multi-level rmap btree.  Delete and recreate a few times to
# exercise the rmap btree grow/shrink functions.
#
#-----------------------------------------------------------------------
# Copyright (c) 2016, Oracle and/or its affiliates.  All Rights Reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc.,  51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#-----------------------------------------------------------------------

seq=`basename $0`
seqres=$RESULT_DIR/$seq
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=1    # failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
    cd /
    umount $SCRATCH_MNT > /dev/null 2>&1
    rm -rf $tmp.*
}

# get standard environment, filters and checks
. ./common/rc
. ./common/filter

# real QA test starts here
_supported_os Linux
_supported_fs xfs
_require_xfs_scratch_rmapbt
_require_xfs_io_command "fpunch"

rm -f $seqres.full

_scratch_mkfs >/dev/null 2>&1
_scratch_mount

testdir=$SCRATCH_MNT/test-$seq
mkdir $testdir

echo "Create the original file blocks"
blksz="$(stat -f $testdir -c '%S')"
nr_blks=$((8 * blksz / 12))

for i in 1 2 x; do
	_pwrite_byte 0x61 0 $((blksz * nr_blks)) $testdir/file1 >> $seqres.full
	_pwrite_byte 0x62 0 $((blksz * nr_blks)) $testdir/file2 >> $seqres.full
	sync

	echo "$i: Reflink every other block"
	seq 1 2 $((nr_blks - 1)) | while read nr; do
		$XFS_IO_PROG -c "fpunch $((nr * blksz)) $blksz" $testdir/file2 >> $seqres.full
	done
	umount $SCRATCH_MNT
	_check_scratch_fs
	_scratch_mount

	test $i = "x" && break

	echo "$i: Delete both files"
	rm -rf $testdir/file1 $testdir/file2
	umount $SCRATCH_MNT
	_check_scratch_fs
	_scratch_mount
done

# success, all done
status=0
exit
