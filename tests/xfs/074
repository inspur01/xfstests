#! /bin/bash
# FS QA Test 074-extsz-hints-vs-maxextlen
#
# Check some extent size hint boundary conditions that can result in
# MAXEXTLEN overflows.
#
#-----------------------------------------------------------------------
# Copyright (c) 2015 Red Hat, Inc. All Rights Reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc.,  51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
#-----------------------------------------------------------------------
#

seq=`basename $0`
seqres=$RESULT_DIR/$seq
echo "QA output created by $seq"

_cleanup()
{
	cd /
	_destroy_loop_device $LOOP_DEV
	rm -f $tmp.* $LOOP_FILE
}

here=`pwd`
tmp=/tmp/$$
status=1	# failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

# get standard environment, filters and checks
. ./common/rc
. ./common/filter

# real QA test starts here
_supported_fs xfs
_supported_os Linux

rm -f $seqres.full

_require_test
_require_xfs_io_command "falloc"

# we use loop devices for this so that we can create large files for prealloc
# without having to care about the underlying device size.
_require_loop

LOOP_FILE=$TEST_DIR/$seq.img
LOOP_MNT=$TEST_DIR/$seq.mnt
mkdir -p $LOOP_MNT
$XFS_IO_PROG -ft -c "truncate 1t" $LOOP_FILE >> $seqres.full
LOOP_DEV=`_create_loop_device $LOOP_FILE`

_mkfs_dev -d size=156452m,agcount=4 -l size=32m $LOOP_DEV
_mount $LOOP_DEV $LOOP_MNT

# Corrupt the BMBT by creating extents larger than MAXEXTLEN
$XFS_IO_PROG -ft \
	-c "extsize 16m" \
	-c "falloc 0 30g" \
	$LOOP_MNT/foo >> $seqres.full

umount $LOOP_MNT
_check_xfs_filesystem $LOOP_DEV none none

_mkfs_dev -f -l size=32m $LOOP_DEV
_mount $LOOP_DEV $LOOP_MNT

# check we trim both ends of the extent approproiately; this will fail
# on 1k block size filesystems without the correct fixes in place.
$XFS_IO_PROG -ft \
	-c "extsize 1g" \
	-c "falloc 1023m 2g" \
	$LOOP_MNT/foo >> $seqres.full

umount $LOOP_MNT
_check_xfs_filesystem $LOOP_DEV none none

# success, all done
echo "Silence is golden"
status=0
exit
