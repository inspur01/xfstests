#! /bin/bash
# FS QA Test No. 181
#
# Test the convention that reflink with length == 0 means "to the end of fileA"
#   - Create a file.
#   - Try to reflink "zero" bytes.
#   - Check that the reflink happened.
#
#-----------------------------------------------------------------------
# Copyright (c) 2015, Oracle and/or its affiliates.  All Rights Reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc.,  51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#-----------------------------------------------------------------------

seq=`basename $0`
seqres=$RESULT_DIR/$seq
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=1    # failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
    cd /
    rm -rf $tmp.* $testdir
}

# get standard environment, filters and checks
. ./common/rc
. ./common/filter
. ./common/reflink

# real QA test starts here
_supported_os Linux
_require_test_reflink
_require_cp_reflink

rm -f $seqres.full

testdir=$TEST_DIR/test-$seq
rm -rf $testdir
mkdir $testdir

echo "Create the original files"
blksz=65536
_pwrite_byte 0x61 0 $((blksz * 256)) $testdir/file1 >> $seqres.full
_pwrite_byte 0x62 0 $((blksz * 256)) $testdir/file2 >> $seqres.full
_pwrite_byte 0x62 0 $((blksz * 2)) $testdir/file2.chk >> $seqres.full
_pwrite_byte 0x61 $((blksz * 2)) $((blksz * 255)) $testdir/file2.chk >> $seqres.full
_reflink_range $testdir/file1 $blksz $testdir/file2 $((blksz * 2)) 0 >> $seqres.full
_test_cycle_mount

md5sum $testdir/file1 | _filter_test_dir
md5sum $testdir/file2 | _filter_test_dir
md5sum $testdir/file2.chk | _filter_test_dir

c1=$(_md5_checksum $testdir/file1)
c2=$(_md5_checksum $testdir/file2)

test ${c1} != ${c2} || echo "file1 and file2 should not match"

echo "Compare against check files"
cmp -s $testdir/file2 $testdir/file2.chk || echo "file2 and file2.chk do not match"

# success, all done
status=0
exit
