#! /bin/bash
# FS QA Test 361
#
# Test remount on I/O errors.
#
# XFS had a bug to hang on remount in this case, this kernel commit fix
# the issue.
# 5cb13dc cancel the setfilesize transation when io error happen
#
#-----------------------------------------------------------------------
# Copyright (c) 2016 Red Hat Inc.  All Rights Reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc.,  51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#-----------------------------------------------------------------------
#

seq=`basename $0`
seqres=$RESULT_DIR/$seq
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=1	# failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
	$UMOUNT_PROG $fs_mnt
	_destroy_loop_device $loop_dev
	cd /
	rm -f $tmp.*
}

# get standard environment, filters and checks
. ./common/rc
. ./common/filter

rm -f $seqres.full

# real QA test starts here
_supported_fs generic
_supported_os Linux
_require_scratch

# create a small filesystem to hold another filesystem image
_scratch_mkfs_sized $((512 * 1024 * 1024)) >>$seqres.full 2>&1
_scratch_mount

# create the sparse fs image and mount point
fs_img=$SCRATCH_MNT/fs.img
fs_mnt=$SCRATCH_MNT/mnt
$XFS_IO_PROG -fc "truncate 1g" $fs_img >>$seqres.full 2>&1
mkdir -p $fs_mnt

# mount loop device and create a larger file to hit I/O errors on loop device
loop_dev=$(_create_loop_device $fs_img)
_mkfs_dev $loop_dev
_mount $loop_dev $fs_mnt
$XFS_IO_PROG -fc "pwrite 0 520m" $fs_mnt/testfile >>$seqres.full 2>&1

# remount should not hang
$MOUNT_PROG -o remount,ro $fs_mnt >>$seqres.full 2>&1

# success, all done
echo "Silence is golden"
status=0
exit
