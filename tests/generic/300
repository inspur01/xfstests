#! /bin/bash
# FSQA Test No. 300
#
# AIO/DIO stress test
# Run random AIO/DIO activity and fallocate/punch_hole simultaneously
# Test will operate on huge sparsed file so ENOSPC is expected.
#
#-----------------------------------------------------------------------
# (c) 2013 Dmitry Monakhov
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc.,  51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
#-----------------------------------------------------------------------
#

seq=`basename $0`
seqres=$RESULT_DIR/$seq
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
fio_config=$tmp.fio
status=1	# failure is the default!
trap "rm -f $tmp.*; exit \$status" 0 1 2 3 15

# get standard environment, filters and checks
. ./common/rc
. ./common/filter

# real QA test starts here
_supported_fs generic
_supported_os Linux
_require_scratch
_require_odirect
_require_block_device $SCRATCH_DEV

# xfs_io is not required for this test, but it's the best way to verify
# the test system supports fallocate() for allocation and hole punching
_require_xfs_io_command "falloc"
_require_xfs_io_command "fpunch"

rm -f $seqres.full

NUM_JOBS=$((4*LOAD_FACTOR))
BLK_DEV_SIZE=`blockdev --getsz $SCRATCH_DEV`
if [ $((BLK_DEV_SIZE)) -gt 1048576 ]
then
    BLK_DEV_SIZE=1048576
fi
FS_SIZE=$((BLK_DEV_SIZE * 512))

cat >$fio_config <<EOF
###########
# $seq test fio activity
# Run DIO, fallocate and punch_hole threads on a single in parallel
#
# If race exist old dio request may rewrite punched block after it was
# allocated to another file, we will catch that by verifying blocks content
#
[global]
directory=${SCRATCH_MNT}
filesize=${FS_SIZE}
size=999G
continue_on_error=write
ignore_error=,ENOSPC
error_dump=0

create_on_open=1
fallocate=none
exitall=1

## Perform direct aio, to files which may be truncated
## by external task
[direct_aio_raicer]
ioengine=libaio
iodepth=128*${LOAD_FACTOR}
bs=128k
direct=1
numjobs=${NUM_JOBS}
rw=randwrite
runtime=100*${TIME_FACTOR}
time_based
filename=racer

# Run falloc and punch_hole threads in parallel
# After activity file will be highly fragmented
[falloc_raicer]
ioengine=falloc
runtime=100*${TIME_FACTOR}
iodepth=1
bssplit=128k/80:512k/10:32k/10
rw=randwrite
numjobs=1
filename=racer

[punch_hole_raicer]
ioengine=falloc
runtime=100*${TIME_FACTOR}
bs=4k
time_based=10
rw=randtrim
numjobs=2
filename=racer
time_based

# Verifier thread continiously write to newly allcated blocks
# and veryfy written content
[aio-dio-verifier]
ioengine=libaio
iodepth=128*${LOAD_FACTOR}
numjobs=1
verify=crc32c-intel
verify_fatal=1
verify_dump=1
verify_backlog=1024
verify_async=4
verifysort=1
direct=1
bs=4k
rw=randwrite
filename=aio-dio-verifier
EOF

_workout()
{
	echo ""
	echo "Run fio with random aio-dio pattern"
	echo ""
	cat $fio_config >>  $seqres.full
	run_check $FIO_PROG $fio_config
}

_require_fio $fio_config

_scratch_mkfs_sized $FS_SIZE >> $seqres.full 2>&1
_scratch_mount

if ! _workout; then
	_scratch_unmount 2>/dev/null
	exit
fi

if ! _scratch_unmount; then
	echo "failed to umount"
	status=1
	exit
fi
status=0
exit
