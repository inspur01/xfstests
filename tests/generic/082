#! /bin/bash
# FS QA Test No. 082
#
# Test quota handling on remount ro failure
#
#-----------------------------------------------------------------------
# Copyright (c) 2015 Red Hat Inc.  All Rights Reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc.,  51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#-----------------------------------------------------------------------
#

seq=`basename $0`
seqres=$RESULT_DIR/$seq
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=1	# failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
	cd /
	rm -f $tmp.*
}

filter_project_quota_line()
{
	grep -v "^project quota on"
}

# get standard environment, filters and checks
. ./common/rc
. ./common/filter
. ./common/quota

# real QA test starts here
_supported_fs generic
_supported_os Linux
_require_test
_require_scratch
_require_quota

rm -f $seqres.full

_scratch_mkfs >>$seqres.full 2>&1
_scratch_mount "-o usrquota,grpquota"

# xfs doesn't need these setups and quotacheck even fails on xfs, so just
# redirect the output to $seqres.full for debug purpose and ignore the results,
# as we check the quota status later anyway.
quotacheck -ug $SCRATCH_MNT >>$seqres.full 2>&1
quotaon $SCRATCH_MNT >>$seqres.full 2>&1

# first remount ro with a bad option, a failed remount ro should not disable
# quota, but currently xfs doesn't fail in this case, the unknown option is
# just ignored, but quota is still on. This may change in future, let's
# re-consider the case then.
_scratch_mount "-o remount,ro,nosuchopt" >>$seqres.full 2>&1
quotaon -p $SCRATCH_MNT | _filter_scratch | filter_project_quota_line
# second remount should succeed, no oops or hang expected
_scratch_mount "-o remount,ro" || _fail "second remount,ro failed"

# success, all done
status=0
exit
