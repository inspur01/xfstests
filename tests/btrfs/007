#! /bin/bash
# FSQA Test No. 007
#
# Run fsstress to create a reasonably strange file system, make a
# snapshot (base) and run more fsstress. Then take another snapshot
# (incr) and send both snapshots to a temp file. Remake the file
# system and receive from the files. Check both states with fssum.
#
#-----------------------------------------------------------------------
# Copyright (C) 2013 STRATO.  All rights reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc.,  51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
#-----------------------------------------------------------------------
#
# creator
owner=list.btrfs@jan-o-sch.net

seq=`basename $0`
seqres=$RESULT_DIR/$seq
echo "QA output created by $seq"

tmp=`mktemp -d`
status=1

_cleanup()
{
	echo "*** unmount"
	_scratch_unmount 2>/dev/null
	rm -f $tmp.*
}
trap "_cleanup; exit \$status" 0 1 2 3 15

# get standard environment, filters and checks
. ./common/rc
. ./common/filter

# real QA test starts here
_supported_fs btrfs
_supported_os Linux
_require_scratch
_require_fssum
_require_seek_data_hole

rm -f $seqres.full

workout()
{
	fsz=$1
	ops=$2

	_scratch_unmount >/dev/null 2>&1
	echo "*** mkfs -dsize=$fsz"    >>$seqres.full
	echo ""                                     >>$seqres.full
	_scratch_mkfs_sized $fsz >>$seqres.full 2>&1 \
		|| _fail "size=$fsz mkfs failed"
	run_check _scratch_mount "-o noatime"

	run_check $FSSTRESS_PROG -d $SCRATCH_MNT -n $ops $FSSTRESS_AVOID -x \
		"$BTRFS_UTIL_PROG subvolume snapshot -r $SCRATCH_MNT $SCRATCH_MNT/base"

	_run_btrfs_util_prog subvolume snapshot -r $SCRATCH_MNT $SCRATCH_MNT/incr

	echo "# $BTRFS_UTIL_PROG send $SCRATCH_MNT/base > $tmp/base.snap" \
		>> $seqres.full
	$BTRFS_UTIL_PROG send $SCRATCH_MNT/base > $tmp/base.snap 2>> $seqres.full \
		|| _fail "failed: '$@'"
	echo "# $BTRFS_UTIL_PROG send -p $SCRATCH_MNT/base\
		$SCRATCH_MNT/incr > $tmp/incr.snap" >> $seqres.full
	$BTRFS_UTIL_PROG send -p $SCRATCH_MNT/base \
		$SCRATCH_MNT/incr > $tmp/incr.snap 2>> $seqres.full \
		|| _fail "failed: '$@'"

	run_check $FSSUM_PROG -A -f -w $tmp/base.fssum $SCRATCH_MNT/base
	run_check $FSSUM_PROG -A -f -w $tmp/incr.fssum -x $SCRATCH_MNT/incr/base \
		$SCRATCH_MNT/incr

	_scratch_unmount >/dev/null 2>&1
	echo "*** mkfs -dsize=$fsz"    >>$seqres.full
	echo ""                                     >>$seqres.full
	_scratch_mkfs_sized $fsz >>$seqres.full 2>&1 \
		|| _fail "size=$fsz mkfs failed"
	run_check _scratch_mount "-o noatime"

	_run_btrfs_util_prog receive $SCRATCH_MNT < $tmp/base.snap
	run_check $FSSUM_PROG -r $tmp/base.fssum $SCRATCH_MNT/base

	_run_btrfs_util_prog receive $SCRATCH_MNT < $tmp/incr.snap
	run_check $FSSUM_PROG -r $tmp/incr.fssum $SCRATCH_MNT/incr
}

echo "*** test send / receive"

fssize=`expr 2000 \* 1024 \* 1024`
ops=200

workout $fssize $ops

echo "*** done"
status=0
exit
