#! /bin/bash
# FS QA Test No. btrfs/040
#
# Regression test for btrfs incremental send issue where an rmdir
# instruction was sent multiple times for the same target directory.
# The number of times depended on the number of hardlinks against
# the same inode inside the target directory. That inode must have
# had the highest number of all the inodes that were children of the
# directory. This made the btrfs receive command fail immediately once
# it received the second rmdir instruction.
#
# This issue is fixed by the following linux kernel btrfs patch:
#
#   Btrfs: send, don't send rmdir for same target multiple times
#
#-----------------------------------------------------------------------
# Copyright (c) 2014 Filipe Manana.  All Rights Reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc.,  51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#-----------------------------------------------------------------------
#

seq=`basename $0`
seqres=$RESULT_DIR/$seq
echo "QA output created by $seq"

tmp=`mktemp -d`
status=1	# failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
    rm -fr $tmp
}

# get standard environment, filters and checks
. ./common/rc
. ./common/filter

# real QA test starts here
_supported_fs btrfs
_supported_os Linux
_require_scratch
_require_fssum

rm -f $seqres.full

_scratch_mkfs >/dev/null 2>&1
_scratch_mount

mkdir -p $SCRATCH_MNT/a/b/c
echo 'hello world' > $SCRATCH_MNT/a/b/c/hel.txt
echo 'ola mundo' > $SCRATCH_MNT/a/b/c/foo.txt
ln $SCRATCH_MNT/a/b/c/foo.txt $SCRATCH_MNT/a/b/c/bar.txt
ln $SCRATCH_MNT/a/b/c/foo.txt $SCRATCH_MNT/a/b/baz.txt

# Filesystem looks like:
#
# .                        (ino 256)
# |-- a/                   (ino 257)
#     |-- b/               (ino 258)
#         |-- c/           (ino 259)
#         |   |-- hel.txt  (ino 260)
#         |   |-- foo.txt  (ino 261)
#         |   |-- bar.txt  (ino 261)
#         |
#         |-- baz.txt      (ino 261)

_run_btrfs_util_prog subvolume snapshot -r $SCRATCH_MNT $SCRATCH_MNT/mysnap1

rm -f $SCRATCH_MNT/a/b/c/foo.txt
rm -f $SCRATCH_MNT/a/b/c/bar.txt
rm -f $SCRATCH_MNT/a/b/c/hel.txt
rmdir $SCRATCH_MNT/a/b/c

# Filesystem now looks like:
#
# .                        (ino 256)
# |-- a/                   (ino 257)
#     |-- b/               (ino 258)
#         |-- baz.txt      (ino 261)

_run_btrfs_util_prog subvolume snapshot -r $SCRATCH_MNT $SCRATCH_MNT/mysnap2

run_check $FSSUM_PROG -A -f -w $tmp/1.fssum $SCRATCH_MNT/mysnap1
run_check $FSSUM_PROG -A -f -w $tmp/2.fssum -x $SCRATCH_MNT/mysnap2/mysnap1 \
	$SCRATCH_MNT/mysnap2

_run_btrfs_util_prog send $SCRATCH_MNT/mysnap1 -f $tmp/1.snap
_run_btrfs_util_prog send -p $SCRATCH_MNT/mysnap1 $SCRATCH_MNT/mysnap2 \
	-f $tmp/2.snap

_scratch_unmount
_check_btrfs_filesystem $SCRATCH_DEV

_scratch_mkfs >/dev/null 2>&1
_scratch_mount

_run_btrfs_util_prog receive $SCRATCH_MNT -f $tmp/1.snap
run_check $FSSUM_PROG -r $tmp/1.fssum $SCRATCH_MNT/mysnap1 2>> $seqres.full

_run_btrfs_util_prog receive $SCRATCH_MNT -f $tmp/2.snap
run_check $FSSUM_PROG -r $tmp/2.fssum $SCRATCH_MNT/mysnap2 2>> $seqres.full

_scratch_unmount
_check_btrfs_filesystem $SCRATCH_DEV

status=0
exit
