#! /bin/bash
# FSQA Test No. 120
#
# Test that if we delete a snapshot, delete its parent directory, create
# another directory with the same name as that parent and then fsync either
# the new directory or a file inside the new directory, the fsync succeeds,
# the fsync log is replayable and produces a correct result.
#
#-----------------------------------------------------------------------
#
# Copyright (C) 2016 SUSE Linux Products GmbH. All Rights Reserved.
# Author: Filipe Manana <fdmanana@suse.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc.,  51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#-----------------------------------------------------------------------
#

seq=`basename $0`
seqres=$RESULT_DIR/$seq
echo "QA output created by $seq"
tmp=/tmp/$$
status=1	# failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
	_cleanup_flakey
	cd /
	rm -f $tmp.*
}

# get standard environment, filters and checks
. ./common/rc
. ./common/filter
. ./common/dmflakey

# real QA test starts here
_supported_fs btrfs
_supported_os Linux
_require_scratch
_require_dm_target flakey
_require_metadata_journaling $SCRATCH_DEV

rm -f $seqres.full

populate_testdir()
{
	_run_btrfs_util_prog subvolume snapshot $SCRATCH_MNT \
		$SCRATCH_MNT/testdir/snap
	_run_btrfs_util_prog subvolume delete $SCRATCH_MNT/testdir/snap
	rmdir $SCRATCH_MNT/testdir
	mkdir $SCRATCH_MNT/testdir
}

_scratch_mkfs >>$seqres.full 2>&1
_init_flakey
_mount_flakey

mkdir $SCRATCH_MNT/testdir
populate_testdir
$XFS_IO_PROG -c "fsync" $SCRATCH_MNT/testdir
_flakey_drop_and_remount

echo "Filesystem contents after the first log replay:"
ls -R $SCRATCH_MNT | _filter_scratch

# Now do the same as before but instead of doing an fsync against the directory,
# do an fsync against a file inside the directory.

populate_testdir
touch $SCRATCH_MNT/testdir/foobar
$XFS_IO_PROG -c "fsync" $SCRATCH_MNT/testdir/foobar
_flakey_drop_and_remount

echo "Filesystem contents after the second log replay:"
ls -R $SCRATCH_MNT | _filter_scratch

_unmount_flakey
status=0
exit
