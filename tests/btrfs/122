#! /bin/bash
# FS QA Test No. btrfs/122
#
# Test that qgroup counts are valid after snapshot creation. This has
# been broken in btrfs since Linux v4.1
#
#-----------------------------------------------------------------------
# Copyright (C) 2016 SUSE Linux Products GmbH. All Rights Reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc.,  51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
#-----------------------------------------------------------------------
#

seq=`basename $0`
seqres=$RESULT_DIR/$seq
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=1	# failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
	cd /
	rm -f $tmp.*
}

# get standard environment, filters and checks
. ./common/rc
. ./common/filter

# remove previous $seqres.full before test
rm -f $seqres.full

# real QA test starts here
_supported_fs btrfs
_supported_os Linux
_require_scratch

rm -f $seqres.full

# Force a small leaf size to make it easier to blow out our root
# subvolume tree
_scratch_mkfs "--nodesize 16384"
_scratch_mount
_run_btrfs_util_prog quota enable $SCRATCH_MNT

mkdir "$SCRATCH_MNT/snaps"

# First make some simple snapshots - the bug was initially reproduced like this
_run_btrfs_util_prog subvolume snapshot $SCRATCH_MNT "$SCRATCH_MNT/snaps/empty1"
_run_btrfs_util_prog subvolume snapshot $SCRATCH_MNT "$SCRATCH_MNT/snaps/empty2"

# This forces the fs tree out past level 0, adding at least one tree
# block which must be properly accounted for when we make our next
# snapshots.
mkdir "$SCRATCH_MNT/data"
for i in `seq 0 640`; do
	$XFS_IO_PROG -f -c "pwrite 0 1M" "$SCRATCH_MNT/data/file$i" > /dev/null 2>&1
done

# Snapshot twice.
_run_btrfs_util_prog subvolume snapshot $SCRATCH_MNT "$SCRATCH_MNT/snaps/snap1"
_run_btrfs_util_prog subvolume snapshot $SCRATCH_MNT "$SCRATCH_MNT/snaps/snap2"

_scratch_unmount

# generate a qgroup report and look for inconsistent groups
$BTRFS_UTIL_PROG check --qgroup-report $SCRATCH_DEV 2>&1 | \
			grep -q -E "Counts for qgroup.*are different"
if [ $? -ne 0 ]; then
	status=0
fi

exit
