#! /bin/bash
# FS QA Test No. btrfs/034
#
# Test for a btrfs incremental send data corruption issue due to
# bad detection of file holes.
#
#-----------------------------------------------------------------------
# Copyright (c) 2014 Filipe Manana.  All Rights Reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc.,  51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#-----------------------------------------------------------------------
#

seq=`basename $0`
seqres=$RESULT_DIR/$seq
echo "QA output created by $seq"

tmp=`mktemp -d`

status=1	# failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
    rm -fr $tmp
}

# get standard environment, filters and checks
. ./common/rc
. ./common/filter

# real QA test starts here
_supported_fs btrfs
_supported_os Linux
_require_scratch

rm -f $seqres.full

_scratch_mkfs >/dev/null 2>&1
_scratch_mount

# Create a file such that its file extent items span at least 3 btree leafs.
# This is necessary to trigger a btrfs incremental send bug where file hole
# detection was not correct, leading to data corruption by overriding latest
# data regions of a file with zeroes.

$XFS_IO_PROG -f -c "truncate 104857600" $SCRATCH_MNT/foo

for ((i = 0; i < 940; i++))
do
	OFFSET=$((32768 + i * 8192))
	LEN=$((OFFSET + 8192))
	$XFS_IO_PROG -c "falloc -k $OFFSET $LEN" $SCRATCH_MNT/foo
	$XFS_IO_PROG -c "pwrite -S 0xf0 $OFFSET 4096" \
		$SCRATCH_MNT/foo | _filter_xfs_io
done

_run_btrfs_util_prog subvolume snapshot -r $SCRATCH_MNT $SCRATCH_MNT/mysnap1

$XFS_IO_PROG -c "truncate 3882008" $SCRATCH_MNT/foo

_run_btrfs_util_prog subvolume snapshot -r $SCRATCH_MNT $SCRATCH_MNT/mysnap2

_run_btrfs_util_prog send $SCRATCH_MNT/mysnap1 -f $tmp/1.snap
_run_btrfs_util_prog send -p $SCRATCH_MNT/mysnap1 $SCRATCH_MNT/mysnap2 \
    -f $tmp/2.snap

md5sum $SCRATCH_MNT/foo | _filter_scratch
md5sum $SCRATCH_MNT/mysnap1/foo | _filter_scratch
md5sum $SCRATCH_MNT/mysnap2/foo | _filter_scratch

_scratch_unmount
_check_btrfs_filesystem $SCRATCH_DEV
_scratch_mkfs >/dev/null 2>&1
_scratch_mount

_run_btrfs_util_prog receive $SCRATCH_MNT -f $tmp/1.snap
md5sum $SCRATCH_MNT/mysnap1/foo | _filter_scratch

_run_btrfs_util_prog receive $SCRATCH_MNT -f $tmp/2.snap
md5sum $SCRATCH_MNT/mysnap2/foo | _filter_scratch

_scratch_unmount
_check_btrfs_filesystem $SCRATCH_DEV

status=0
exit
