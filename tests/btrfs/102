#! /bin/bash
# FSQA Test No. 102
#
# Regression test for an ENOSPC issue when attempting to write to a file in
# a filesystem without any data block groups allocated.
#
#-----------------------------------------------------------------------
#
# Copyright (C) 2015 SUSE Linux Products GmbH. All Rights Reserved.
# Author: Filipe Manana <fdmanana@suse.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc.,  51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#-----------------------------------------------------------------------
#

seq=`basename $0`
seqres=$RESULT_DIR/$seq
echo "QA output created by $seq"
tmp=/tmp/$$
status=1	# failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
	rm -f $tmp.*
}

# get standard environment, filters and checks
. ./common/rc
. ./common/filter

# real QA test starts here
_supported_fs btrfs
_supported_os Linux
_require_scratch

rm -f $seqres.full

_scratch_mkfs >>$seqres.full 2>&1

# Mount our filesystem without space caches enabled so that we do not get any
# space used from the initial data block group that mkfs creates (space caches
# used space from data block groups).
_scratch_mount "-o nospace_cache"

# Need an fs with at least 2Gb to make sure mkfs.btrfs does not create an fs
# using mixed block groups (used both for data and metadata). We really need
# to have dedicated block groups for data to reproduce the issue and mkfs.btrfs
# defaults to mixed block groups only for small filesystems (up to 1Gb).
_require_fs_space $SCRATCH_MNT $((2 * 1024 * 1024))

# Run balance with the purpose of deleting the unused data block group that
# mkfs created. We could also wait for the background kthread to automatically
# delete the unused block group, but we do not have a way to make it run and
# wait for it to complete, so just do a balance instead of some unreliable sleep
_run_btrfs_util_prog balance start -dusage=0 $SCRATCH_MNT

# Now unmount the filesystem, mount it again (either with or with space caches
# enabled, it does not matter to trigger the problem) and attempt to create a
# file with some data - this used to fail with ENOSPC because there were no
# data block groups when the filesystem was mounted and the data space info
# object was marked as full when initialized (because it had 0 total bytes),
# which prevented the file write path from attempting to allocate a data block
# group and fail immediately with ENOSPC.
_scratch_cycle_mount
echo "hello world" > $SCRATCH_MNT/foobar

echo "Silence is golden"
status=0
exit
